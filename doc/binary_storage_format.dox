/*!
    \page binary_storage_format 
    
    Binary Storage Format for Entries

    The idea is to store the data as Rr's, (almost) ready to be
    sent on the wire in a DNS reply, after they are copied
    to the outgoing message buffer. We have our own header
    to understand the data and to work efficiently with it.

    When we copy data to a DNS reply buffer, we must handle
    the NAME (labels) gracefully (it must be copied at least once,
    and pointers in other records in a RrSet must be updated
    accordingly).

    - version     Version of the data format
    - flags       Flags to quickly check if a popular type of RR's are present
    - labelsize   Size of the labels buffer (in the first RR)
    - zonelen     Offset to the start of labels that identifies the zone
    - rrcount     Number of RR's in the RRSet
    - indexoffset Offset to the start of the index.

    \verbatim
    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | version       | flags         |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | rrcount                       |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | labelsize     | zonelen       |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | IndexOffset                   |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    /        RRset entries          /
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    |                               |
    /            index              /
    |                               |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    \endverbatim

    The index is sorted so that rr's with the same type are clustered
    and most popular types (in lookups) are first

    Index format
    \verbatim
    0                   1
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    | Type                          |
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
    + Offset                        +
    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+HEADER
    \endverbatim

    RR format (from RFC 1035)
    
    The first entry has a NAME. All other entries
    have just a pointer to the first entries NAME.
    \verbatim
                                    1  1  1  1  1  1
      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                                               |
    /                                               /
    /                      NAME                     /
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TYPE                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                     CLASS                     |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                      TTL                      |
    |                                               |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |                   RDLENGTH                    |
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--|
    /                     RDATA                     /
    /                                               /
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    \endverbatim
    
    The keys for entries is: 0 fdqn-str
    
    The 0 is a 8-bit tag that identifies the key-type (Entry as fqdn)
    and the fdqn is a string with the full fdqn to the Entry in question
    with the bytes reversed. For example: 0 moc.elpmaxe.www for "www.example.com"
    
    
    Binary storage format for diff's (IXFR)
    
    The changes are saved in DNS messages in the same
    format that the server will use to reply to a IXFR
    request. Idelly, the server should only need to 
    iterate over a zone from start to end version and send
    all the messages in that set. 
    
    Diffs's keys are: 1 zone-name 0 version
    
    The 1 is a 8-bit tag that identifies the key-type (Diff as zone-name).
    The Zone-name has it's bytes reversed.
    Version is a 32 bit integer in big endian format, and the value is the 
    soa version for these changes (compared to the previous version).
*/
