set(EXTERNAL_PROJECTS_PREFIX ${CMAKE_BINARY_DIR}/external-projects)
set(EXTERNAL_PROJECTS_INSTALL_PREFIX ${EXTERNAL_PROJECTS_PREFIX}/installed)

include(GNUInstallDirs)
include(ExternalProject)

# MUST be called before any add_executable() # https://stackoverflow.com/a/40554704/8766845
link_directories(${EXTERNAL_PROJECTS_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
include_directories($<BUILD_INTERFACE:${EXTERNAL_PROJECTS_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}>)

ExternalProject_Add(logfault
    PREFIX "${EXTERNAL_PROJECTS_PREFIX}"
    GIT_REPOSITORY "https://github.com/jgaa/logfault.git"
    GIT_TAG "master"
    CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECTS_INSTALL_PREFIX}
        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
        -DCMAKE_GENERATOR='${CMAKE_GENERATOR}'
        -DCMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}'
)

ExternalProject_Add(glad
    PREFIX "${EXTERNAL_PROJECTS_PREFIX}"
    GIT_REPOSITORY "https://github.com/jgaa/glad.git"
    GIT_TAG "main"
    CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECTS_INSTALL_PREFIX}
        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
        -DCMAKE_GENERATOR='${CMAKE_GENERATOR}'
        -DCMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}'
)

ExternalProject_Add(externalYahat
    PREFIX "${EXTERNAL_PROJECTS_PREFIX}"
    GIT_REPOSITORY "https://github.com/jgaa/yahat-cpp.git"
    GIT_TAG "main"
    CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECTS_INSTALL_PREFIX}
        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
        -DCMAKE_GENERATOR='${CMAKE_GENERATOR}'
        -DCMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}'
        -DYAHAT_WITH_EXAMPLES=OFF
        -DUSE_LOGFAULT=ON
        -DYAHAT_USE_VALGRIND=${NSBLAST_USE_VALGRIND}
        -DBoost_ROOT=${Boost_ROOT}
        -DUSE_BOOST_VERSION=${USE_BOOST_VERSION}
        -DBoost_NO_WARN_NEW_VERSIONS=1
        -DLOGFAULT_ROOT='${EXTERNAL_PROJECTS_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR}'
)

add_dependencies(externalYahat logfault)

#        -DPORTABLE=${PORTABLE}
#-DCMAKE_CXX_COMPILER='${CMAKE_CXX_COMPILER}'
#-DCMAKE_C_COMPILER='${CMAKE_C_COMPILER}'
#-DCMAKE_GENERATOR='${CMAKE_GENERATOR}'
#-DCMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}'

ExternalProject_Add(rocksdb
    PREFIX "${EXTERNAL_PROJECTS_PREFIX}"
    GIT_REPOSITORY "https://github.com/facebook/rocksdb.git"
    GIT_TAG "v7.10.2"
    CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX=${EXTERNAL_PROJECTS_INSTALL_PREFIX}
        -DUSE_RTTI=1
        -DCMAKE_CXX_STANDARD=17
        -DWITH_TESTS=OFF
        -DWITH_ALL_TESTS=OFF
        -DWITH_TOOLS=OFF
        -DWITH_BENCHMARK_TOOLS=OFF
        -DWITH_CORE_TOOLS=OFF
        -DWITH_JNI=OFF
        -DJNI=OFF
        -DWITH_EXAMPLES=OFF
        -DWITH_BENCHMARK=OFF
        -DWITH_SNAPPY=ON
        -DWITH_ZLIB=ON
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON


     # Required because CMake don't work really well with ninja
     BUILD_BYPRODUCTS external-projects/src/rocksdb-build/librocksdb.a
)

ExternalProject_Get_Property(rocksdb BINARY_DIR)
set(ROCKSDB_LIBRARIES ${BINARY_DIR}/librocksdb.a)
set(ROCKSDB_FOUND TRUE)

message("For rocksdb: EXTERNAL_PROJECTS_INSTALL_PREFIX='${EXTERNAL_PROJECTS_INSTALL_PREFIX}'")
