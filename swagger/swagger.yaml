swagger: "2.0"
info:
  description: "Welcome to this REST API for the [nsblast](https://github.com/jgaa/nsblast) authoritative DNS server"
  version: "1.0.0"
  title: "nsBLAST API"
  #termsOfService: "http://swagger.io/terms/"
  contact:
    email: "jarle@jgaa.com"
  license:
    name: "GNU General Public License v3.0"
    url: "https://github.com/jgaa/nsblast/blob/main/LICENSE"
#host: "petstore.swagger.io"
basePath: "/api/v1"
tags:
- name: version
  description: Version information
- name: "zone"
  description: "DNS Zone"
- name: vzone
  description: Operations about a virtual zone (a super-zone on top on an existing zone that can be maintained by a tenant not owning the actual zone).
- name: rr
  description: Operations about an individual DNS entry's resource record(s)
- name: "tenant"
  description: "Operations about a tenant"
- name: "user"
  description: "Operations about a user"
- name: "config"
  description: "Local server configuration (admin access)"
- name: role
  description: RBAC roles. RBAC are supported for users and api keys.

schemes:
 - "https"
 - "http"

paths:
  /version:
    get:
      tags:
        - version
      summary: Get the version information for nsblast and components.
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"


  /zone:
    parameters:
    - name: tenant
      in: query
      description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission. If you use '*' as the tenant value, all zones for all tenants are returned.
      schema:
        type: string
    get:
      tags:
        - zone
      summary: List Zones
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
          default: 100
        - name: from
          in: query
          description: Start the listing after this fqdn. This can be used to paginate a listing of more items than the first page (max 1000 items) is available.
          schema:
            type: string
        - name: direction
          in: query
          description: Iterate `forward` or `backward`. The direction is ignored unless `from` is set.
          schema:
              type: string
          default: forward
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /zone/{zonename}:
    parameters:
    - in: path
      name: zonename
      description: "Unique fqdn of a DNS zone, for example: 'example.com'"
      required: true
      type: string
    - name: tenant
      in: query
      description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
      schema:
        type: string
    - name: kind
      in: query
      description: "What kind of listing the user want in return.
          <br> - *default* A listing with fqdn's for the zone
          <br> - *verbose* A listing with fqdn's with the resource record for each entry.
          "
      schema:
        type: string
      default: default
    get:
      tags:
        - zone
      summary: List Resource Records in a zone
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
          default: 100
        - name: from
          in: query
          description: Start the listing after this fqdn. This can be used to paginate a listing of more items than the first page (max 1000 items) is available.
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized.)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    post:
      tags:
      - zone
      summary: "Create a new zone"
      description: "A new zone is added if the fqdn is available (in nsblasts internal database)."
      operationId: "addZone"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the Zone. Soa and two ns records *must* be present."
        required: true
        schema:
          $ref: "#/definitions/Entry"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Zone already exist"

    delete:
      tags:
      - zone
      summary: Deletes an existing zone
      description: "Deletes a zone and all it's domain name entries."
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Zone not found"

  /vzone:
    parameters:
    - name: tenant
      in: query
      description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission. If you use '*' as the tenant value, all vzones for all tenants are returned.
      schema:
        type: string
    get:
      tags:
        - vzone
      summary: List Virtual Zones
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
          default: 100
        - name: from
          in: query
          description: Start the listing after this fqdn. This can be used to paginate a listing of more items than the first page (max 1000 items) is available.
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /vzone/{zonename}:
    parameters:
    - in: path
      name: zonename
      description: "Zone to create vzone in. This must be an existing zone."
      required: true
      type: string
    - name: tenant
      in: query
      description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
      schema:
        type: string

    post:
      tags:
      - vzone
      summary: "Create a new vzone"
      description: "A new vzone is added if the fqdn is available (in nsblasts internal database)."
      operationId: "addVzone"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the Vzone. Resource Records can be set using the 'rr' resources just qas with a normal zone, once the vzone is created."
        required: true
        schema:
          $ref: "#/definitions/VzoneEntry"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "404":
          description: "Zone not found"
        "409":
          description: "Vzone already exist"

  /vzone/{vzonename}:
    parameters:
    - in: path
      name: vzonename
      description: "Unique fqdn of a vzone, for example: 'user1.vzones.example.com'"
      required: true
      type: string
    - name: tenant
      in: query
      description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
      schema:
        type: string
    get:
      tags:
        - vzone
      summary: List Resource Records in a vzone
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
          default: 100
        - name: from
          in: query
          description: Start the listing after this fqdn. This can be used to paginate a listing of more items than the first page (max 1000 items) is available.
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized.)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    delete:
      tags:
      - vzone
      summary: Deletes an existing vzone
      description: "Deletes a vzone and all it's entries."
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Vzone not found"

  /rr/{fqdn}:
    parameters:
      - in: path
        name: fqdn
        description: "fqdn to change, for example: 'www.example.com' The 'rr' entries contain a, aaa, cname and txt resource records for any fqdn. The Zone and Zone ownership is deduced from the fqdn. You can only uise fqdn's for zones already created under your account."
        required: true
        type: string
      - name: tenant
        in: query
        description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
        schema:
          type: string

    get:
      tags:
        - rr
      summary: Get Resource Records for a fqdn
      operationId: "getFdqn"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized.)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    post:
      tags:
      - rr
      summary: Add a new fqdn entry with resource records
      description: "A new fqdn is added. Note that if you have a zone example.com, and you want to associate it with a ip address, you can use POST to create a new resource record with a/aaaa values in it."
      operationId: "addFdqn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Resource records for the fqdn
        required: true
        schema:
          $ref: "#/definitions/Entry"
      - name: wait
        in: query
        description: Number of seconds to wait for the operation to be replicated to secondary servers.
        schema:
          type: integer
          default: 0
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: Invalid input
        "403":
          description: Zone not created or not owned by your account
        "409":
          description: fqdn already exist

    put:
      tags:
      - rr
      summary: Replace the resource records for an existing fqdn
      description: ""
      operationId: "putFdqn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the Zone"
        required: true
        schema:
          $ref: "#/definitions/Entry"
      - name: wait
        in: query
        description: Number of seconds to wait for the operation to be replicated to secondary servers.
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: Invalid input
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found
    patch:
      tags:
      - rr
      summary: Create a new fqdn or update/merge an existing fqdn
      description: "Convenience method, like 'upsert' in a database operation. Note that only declared properties will be merged. For example, if you want to switch from cname to a/aaaa records, you specify 'cname' as an empty string and populate a and aaaa arrays with ip numbers. Or, if you don't specify for example 'txt', its value will remain unchanged."
      operationId: "patchFdqn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Resource records for the fqdn
        required: true
        schema:
          $ref: "#/definitions/Entry"
      - name: wait
        in: query
        type: integer
        description: Number of seconds to wait for the operation to be replicated to secondary servers.
        schema:
          type: integer
          default: 0
      - name: append
        in: query
        type: boolean
        description: Allows new entries to be appended, in stead of owerwriting the existing of the same type in the same fqdn. Only valid for entries that can have multiple values, like a, txt, mz, ns etc.
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: Invalid input
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found
    delete:
      tags:
      - rr
      operationId: "deleteFdqn"
      summary: Deletes an existing fqdn
      description: "Deletes a fqdn and all it's resource records (except nn and soa, which are kept in the zone itself). For example, if you delete 'example.com', that means that the resource records are gone, exept the dns information and the soa properties."
      parameters:
      - name: wait
        in: query
        description: Number of seconds to wait for the operation to be replicated to secondary servers.
        schema:
          type: integer
          default: 0
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found

  /rr/{fqdn}/{rrname}:
    parameters:
    - in: path
      name: fqdn
      description: "fqdn to delete, for example: 'www.example.com' The Zone and Zone ownership is deduced from the fqdn. You can only use fqdn's for zones already created under your account."
      required: true
      type: string
    - name: wait
      in: query
      description: Number of seconds to wait for the operation to be replicated to secondary servers.
      schema:
        type: integer
        default: 0
    - in: path
      name: rrname
      required: true
      type: string
      description: "Narrows the request to specific resource types. One or more of: *a*, *aaaa*, *ns*, *txt*, *cname*, *mx*, *ptr*, *srv*, *hinfo*, *sdfdb* separated by comma and without any spacing."
    delete:
      tags:
      - rr
      operationId: "deleteFdqnRr"
      summary: Deletes a resource record from an existing fqdn
      description: "Deletes the specified resource record from a fqdn. If no resource records remains, the fqdn is deleted as well."
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found

  /config/{zone}/master:
    parameters:
    - in: path
      name: zone
      description: fqdn for the zone
      required: true
      type: string

    post:
      tags:
      - config
      summary: "Configure the server as a slave for the zone"
      description: "The zone is added to the list of zones the server serves as a slave (in nsblasts internal database)."
      operationId: "configAddMaster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/MasterZone"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Already exist"

    put:
      tags:
      - config
      summary: "Configure or update the server as a slave for the zone."
      description: "The zone is added to the list of zones the server serves as a slave (in nsblasts internal database). PUT will either create or re-write the config."
      operationId: "configPutMaster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/MasterZone"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Already exist"

    patch:
      tags:
      - config
      summary: "Configure or update the server as a slave for the zone"
      description: "The zone is added to the list of zones the server serves as a slave (in nsblasts internal database). PATCH will either create or merge the config, by leaving existing entities that is not mentioed in the json document as is."
      operationId: "configPatchMaster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/MasterZone"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Already exist"

    delete:
      tags:
      - config
      summary: "Remove the server as a slave for the zone"
      description: "This command removes the zone from the list of slave-zones on this server. It will not remove the server from the master-servers SOA record."
      operationId: "configDeleteMaster"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Config not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /tenant:
    get:
      tags:
        - tenant
      summary: List tenants
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
          default: 100
        - name: from
          in: query
          description: Start the listing after this tenant-id. This can be used to paginate a listing of more items than firts in one retrurned list (max 1000 items).
          schema:
            type: string
        - name: kind
          in: query
          description: "What kind of listing the user want in return.
            <br> - *default* A verbose listing
            <br> -  *id* A listing only of the Tenant id's
            <br> - *brief* A listing with tenant id, name, and active state
            "
          schema:
            type: string
          default: default
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized.)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    post:
      tags:
        - tenant
      summary: Create a new tenant.
      operationId: addTenant
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the Tenant.
        required: true
        schema:
          $ref: "#/definitions/Tenant"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Tenant already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /tenant/{tenantId}:
    parameters:
      - in: path
        name: tenantId
        description: Unique name or UUID for a tenant.
        required: true
        type: string
    get:
      tags:
        - tenant
      summary: Get a tenant
      responses:
        "200":
          description: "Tenant object"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    put:
      tags:
        - tenant
      summary: Update a tenant. Replaces the data.
      operationId: putTenant
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the Tenant.
        required: true
        schema:
          $ref: "#/definitions/Tenant"
      responses:
        "200":
          description: "Success (updated)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "201":
          description: "Success (created)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Tenant already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    patch:
      tags:
        - tenant
      summary: Update a tenant. Merges the data.
      operationId: putTenant
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the Tenant.
        required: true
        schema:
          $ref: "#/definitions/Tenant"
      responses:
        "200":
          description: "Success (updated)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "201":
          description: "Success (created)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Tenant already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    delete:
      tags:
      - tenant
      summary: "Delete a tenant"
      description: "This command deletes a tenant and all it's users, roles and zones."
      operationId: "tenantDelete"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success (deleted)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /permissions:
    get:
      tags:
      - role
      summary: List permissions available to the user
      description: "Returns a list of all the permissions that are available to the tenant the user belongs to."
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /role:
    get:
      tags:
      - role
      summary: List Roles
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    post:
      tags:
      - role
      summary: Create Role
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: "body"
          name: "body"
          description: Properties for the Role.
          required: true
          schema:
            $ref: "#/definitions/Role"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

        "409":
          description: "Role already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /role/{roleName}:
    get:
      tags:
      - role
      summary: Get Role
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: path
          name: roleName
          description: Name of the role to fetch
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Role not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    put:
      tags:
      - role
      summary: Upsert Role
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: path
          name: roleName
          description: Name of a role.
          required: true
          type: string
        - in: "body"
          name: "body"
          description: Properties for the Role. If the name in the body is not the same as the name in the path, this is understood as a valid rename operation.
          required: true
          schema:
            $ref: "#/definitions/Role"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "201":
          description: "Success (created)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Role already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    delete:
      tags:
      - role
      summary: "Delete a Role"
      description: "This command deletes a Role."
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: path
          name: roleName
          description: Name of a role.
          required: true
          type: string
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success (deleted)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Role not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"


  /user:
    get:
      tags:
        - user
      summary: List users
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
      responses:
        "200":
          description: "Tenant object"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    post:
      tags:
      - user
      summary: Create User
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: "body"
          name: "body"
          description: Properties for the User.
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

        "409":
          description: "User already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /user/{userName}:
    get:
      tags:
      - user
      summary: Get User
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: path
          name: userName
          description: Name of the user to fetch
          required: true
          type: string
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    put:
      tags:
      - user
      summary: Upsert User
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: path
          name: userName
          description: Name of the user to upsert. If you are re-naming a user, userName is the existing name, and you put the new name in the body.
          required: true
          type: string
        - in: "body"
          name: "body"
          description: Properties for the User. If the name in the body is not the same as the name in the path, this is understood as a valid rename operation.
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "201":
          description: "Success (created)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "User already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    delete:
      tags:
      - user
      summary: "Delete a User"
      description: "This command deletes an existing user."
      parameters:
        - name: tenant
          in: query
          description: Applies for `tenant` in stead of the tenant you are logged in as. Requires the **IMPERSONATE_TENANT** permission.
          schema:
            type: string
        - in: path
          name: userName
          description: Name of a User.
          required: true
          type: string
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success (deleted)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /backup:
    post:
      tags:
        - backup
      summary: Create a new backup of the entire database.
      operationId: createDbBackup
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/BackupReq"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "A Backup related operation is already in progress"
    get:
      tags:
        - backup
      summary: List all successful backups that are still available
      operationId: listDbBackups
      parameters:
        - in: query
          name: path
          description: Path to the backup on the file system. The default is to use the folder 'backup' in the saervers database directory.
          required: false
          type: string
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
    delete:
      tags:
        - backup
      summary: Delete all backups that are still available
      operationId: deleteDbBackups
      parameters:
        - in: query
          name: path
          description: Path to the backup on the file system. The default is to use the folder 'backup' in the saervers database directory.
          required: false
          type: string
        - in: query
          name: keep
          description: "Tells delete to keep the last # backups and delete everything else."
          required: false
          type: integer
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /backup/{id}/verify:
    post:
      tags:
        - backup
      summary: Verify a backup
      operationId: verifyDbBackup
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: id
        type: integer
        description: "Backup ID (not uuid)"
      - in: body
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/BackupVerifyReq"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "A Backup related operation is already in progress"

  /backup/{id}:
    delete:
      tags:
        - backup
      summary: "Delete backup #"
      operationId: deleteDbBackup
      parameters:
        - in: query
          name: path
          description: Path to the backup on the file system. The default is to use the folder 'backup' in the saervers database directory.
          required: false
          type: string
        - in: path
          name: id
          description: "Backlup id (not uuid)"
          required: true
          type: integer
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

definitions:

  Master:
    type: object
    required:
      - hostname
    properties:
      hostname:
        type: string
        description: Hostname or (better) IP to the primary name server to update the zone from.
      port:
        type: integer
        default: 53
      refresh:
        type: integer
        default: 600
      strategy:
        type: string
        default: axfr
        description: "How to update the local zone-data from the master-server. Can be one of: axfr, ixfr "

  MasterZone:
    type: object
    required:
      - master
    properties:
      master:
        $ref: "#/definitions/Master"
      properties:
        type: array
        description: Optional properties.
        items:
          properties:
            name:
              type: string
            value:
              type: string


  Uuid:
    type: object
    properties:
      id:
        type: string


  Soa:
    type: object
    required:
      - mname
      - rname
    properties:
      refresh:
        type: integer
      retry:
        type: integer
      expire:
        type: integer
      minimum:
        type: integer
      mname:
        type: string
        description: Primar DNS server fqdn
      rname:
        description: Email where a contact for the zone can be reached. The formal format is aquard (see RFC 1035). Nsblast will convert normal email-names like `john.doe@example.com` automatically to the required format.

  Ns:
    type: array
    items:
      type: string

  Txt:
    type: array
    items:
      type: string

  Zone:
    type: object
    description: A DNS zone. All the properties are optional. Reasonable defaults will be set for omitted items.
    properties:
      soa:
        $ref: "#/definitions/Soa"
      ns:
        $ref: "#/definitions/Ns"
  Rra:
    type: array
    description: Resource type for A (ipv4 and ipv6) entries.
    items:
      type: string

  Mx:
    type: array
    items:
      properties:
        priority:
          type: integer
        host:
          type: string

  Afsdb:
    type: array
    items:
      properties:
        subtype:
          type: integer
        host:
          type: string

  Hinfo:
    type: object
    properties:
      cpu:
        type: string
      os:
        type: string

  Rp:
    type: object
    properties:
      mbox:
        type: string
      txt:
        type: string

  Ptr:
    type: string
    description: Pointer to domain name. Usually only used for IP to domain name mapping in the special zones in-addr.arpa and ip6.

  Srv:
    type: array
    description: See RFC 2782. Note that this Resource Record must be added after the records it points to (it's target) are created and contains A or AAAA Resource Records.
    items:
      type: object
      required:
        - port
        - target
      properties:
        priority:
          type: integer
        weight:
          type: integer
        port:
          type: integer
        target:
          type: string
          description: Pointer (fqdn) to a node that contains address record(s). It can not point to an alias.

  Base64:
    type: string
    description: Binary data. Must be encoded as BASE64.

  Rr:
    type: array
    description: General method to submit *any* Resource Record, using base64 encoding for the RDATA section. This allows you to add experimental Resource Records and any Resource Record not direcly supported by this API. Please note that nsblast only support the CLASS_IN Resource Record type at this time. (This is the class used for the Internet).
    items:
      type: object
      required:
        - type
        - rdata
      properties:
        type:
          type: integer
        rdata:
          $ref: "#/definitions/Base64"


  Entry:
    type: object
    properties:
      ttl:
        type: integer
        default: 2592000
        description: Attribute. Time in seconds that DNS servers can cache the RR(s) before they need to refresh their cache. Applies for all the RR's in the Entry
      a:
        $ref: "#/definitions/Rra"
      txt:
        $ref: "#/definitions/Txt"
      cname:
        type: string
        description: Redirect to another fqdn. If used, a and aaaa must be empty
      mx:
        $ref: "#/definitions/Mx"
      soa:
        $ref: "#/definitions/Soa"
      ns:
        $ref: "#/definitions/Ns"
      hinfo:
        $ref: "#/definitions/Hinfo"
      ptr:
        $ref: "#/definitions/Ptr"
      rp:
        $ref: "#/definitions/Rp"
      afsdb:
        $ref: "#/definitions/Afsdb"
      srv:
        $ref: "#/definitions/Srv"
      dhcid:
        $ref: "#/definitions/Base64"
      openpgpkey:
        $ref: "#/definitions/Base64"
      rr:
        $ref: "#/definitions/Rr"

  VzoneEntry:
    type: object
    properties:
      id:
        type: string
        description: uuid for the vzone
      fqdn:
        type: string
        description: "The *full* fqdn for the vzone. For example 'user1.vzones.example.com' if the zone is 'vzones.example.com'"
      name:
        type: string
        description: Optional name for the vzone

  ZoneFilter:
    type: object
    properties:
      fqdn:
        type: string
      recursive:
        type: boolean
      regex:
        type: string

  Permission:
    type: string
    enum:
      - USE_API
      - READ_ZONE
      - LIST_ZONES
      - CREATE_ZONE
      - UPDATE_ZONE
      - DELETE_ZONE
      - READ_VZONE
      - LIST_VZONES
      - CREATE_VZONE
      - UPDATE_VZONE
      - DELETE_VZONE
      - READ_RR
      - LIST_RRS
      - CREATE_RR
      - UPDATE_RR
      - DELETE_RR
      - CREATE_APIKEY
      - LIST_APIKEYS
      - GET_APIKEY
      - DELETE_APIKEY
      - GET_SELF_USER
      - DELETE_SELF_USER
      - CREATE_USER
      - LIST_USERS
      - GET_USER
      - UPDATE_USER
      - DELETE_USER
      - CREATE_ROLE
      - LIST_ROLES
      - GET_ROLE
      - UPDATE_ROLE
      - DELETE_ROLE
      - GET_SELF_TENANT
      - UPDATE_SELF_TENANT
      - DELETE_SELF_TENANT
      - CREATE_TENANT
      - LIST_TENANTS
      - GET_TENANT
      - UPDATE_TENANT
      - DELETE_TENANT
      - IMPERSONATE_TENANT
      - CONFIG_SLAVE
      - CREATE_BACKUP
      - LIST_BACKUPS
      - RESTORE_BACKUP
      - VERIFY_BACKUP
      - DELETE_BACKUP

  KeyValueList:
    type array:
    description: Optional properties.
    items:
      properties:
        key:
          type: string
        value:
          type: string

  Role:
    type object:
    properties:
      name:
        type: string
      properties:
        $ref: "#/definitions/KeyValueList"
      permissions:
        type: array
        description: List of permissions for this Role
        items:
          $ref: "#/definitions/Permission"
      filter:
        $ref: "#/definitions/ZoneFilter"

  Tenant:
    type: object
    properties:
      id:
        type: string
        description: Unique UUID for this tenant
      name:
        type: string
        description: "Unique name for this tenant.`"
      active:
        type: boolean
        default: true
      root:
        type: string
        description: The start of the domain-tree this tenant can modify
      properties:
         $ref: "#/definitions/KeyValueList"
      allowedPermissions:
        type: array
        items:
          $ref: "#/definitions/Permission"
      roles:
        type: array
        items:
          $ref: "#/definitions/Role"
      users:
        type: array
        items:
          $ref: "#/definitions/User"

  UserAuth:
    type: object
    properties:
      hash:
        type: string
        description: Cryptographic hash from seed and password
      seed:
        type: string
        description: Seed (random, short string) to make it harder to perform dicetionary attacks against the hashed passwords if they are leaked.
      password:
        type: string
        description: Password in clear text. Can be sent to the server when a user is created/updated. The server will calculate and populate the hash value and then forget the pwssword.

  User:
    type: object
    properties:
      id:
        type: string
        description: UUID for the user
      active:
        type: boolean
      name:
        type: string
        description: "Name for the user. Can be a traditional (unix-like) user-name or an email. Must be globally unique (for an instance of nsblast)."
      properties:
         $ref: "#/definitions/KeyValueList"
      roles:
        type: array
        description: "List of (existing) roles to apply to the user"
        items:
          type: string
      auth:
        $ref: "#/definitions/UserAuth"


  Returns:
    type: object
    properties:
      rcode:
        type: integer
        description: HTTP return code
      error:
        type: boolean
        description: True if the request failed
      message:
        type: string
        description: "Error-message if the request failed"

  ReturnsValue:
    type: object
    properties:
      rcode:
        type: integer
        description: HTTP return code
      error:
        type: boolean
        description: True if the request failed
      message:
        type: string
        description: Error-message if the request failed
      value:
        type: object
        description: Object if the request succeeds

  ReturnsListOfValues:
    type: object
    properties:
      rcode:
        type: integer
        description: HTTP return code
      error:
        type: boolean
        description: True if the request failed
      message:
        type: string
        description: Error-message if the request failed
      value:
        type: array
        items:
          type: object
        description: Object(s) if the request succeeds

  BackupReq:
    type: object
    properties:
      path:
        type: string
        description: Path to the backup on storage. If unset, it use the same path as the database use,  and put the backup in the subfolder 'backup'
      flushBefore:
        type: boolean
        description: Flush the database prior to making the backup. Defaults to true.

  BackupVerifyReq:
    type: object
    properties:
      path:
        type: string
        description: Path to the backup on storage. If unset, it use the same path as the database use,  and put the backup in the subfolder 'backup'

  VersionInfo:
    type: object
    properties:
      nsblast:
        type: string
        description: Version of nsblast
      yahat:
        type: string
        description: Version of the HTTP server
      boost:
        type: string
        description: Version of the boost library
      rocksdb:
        type: string
        description: Version of the Rocksdb data engine.

externalDocs:
  description: "Find out more about nsBLAST and ready to go hosting options"
  url: "https://nsblast.com"
