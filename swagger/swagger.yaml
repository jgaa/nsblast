swagger: "2.0"
info:
  description: "Welcome to this REST API for the [nsblast](https://github.com/jgaa/nsblast) authoritative DNS server"
  version: "1.0.0"
  title: "nsBLAST API"
  #termsOfService: "http://swagger.io/terms/"
  contact:
    email: "jarle@jgaa.com"
  license:
    name: "GNU General Public License v3.0"
    url: "https://github.com/jgaa/nsblast/blob/main/LICENSE"
#host: "petstore.swagger.io"
basePath: "/api/v1"
tags:
- name: "zone"
  description: "DNS Zone"
  # externalDocs:
  #   description: "A zone is an administrative unit in the DNS hirarcy"
  #   url: "http://swagger.io"
- name: rr
  description: Operations about an individual DNS entry's resource record(s)
- name: "tenant"
  description: "Operations about a tenant"
- name: "user"
  description: "Operations about a user"
- name: "config"
  description: "Local server configuration (admin access)"

# schemes:
# - "https"
# - "http"
paths:
  /zone/{zonename}:
    parameters:
    - in: path
      name: zonename
      description: "Unique fqdn of a DNS zone, for example: 'example.com'"
      required: true
      type: string
    post:
      tags:
      - zone
      summary: "Create a new zone to the default namespace"
      description: "A new zone is added if the fqdn is available (in nsblasts internal database)."
      operationId: "addZone"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the Zone. Soa and two ns records *must* be present."
        required: true
        schema:
          $ref: "#/definitions/Entry"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Zone already exist"

    delete:
      tags:
      - zone
      summary: Deletes an existing zone
      description: "Deletes a zone and all it's domain name entries."
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Zone not found"

  /rr/{fqdn}:
    parameters:
    - in: path
      name: fqdn
      description: "fqdn to change, for example: 'www.example.com' The 'rr' entries contain a, aaa, cname and txt resource records for any fqdn. The Zone and Zone ownership is deduced from the fqdn. You can only uise fqdn's for zones already created under your account."
      required: true
      type: string

    post:
      tags:
      - rr
      summary: Add a new fqdn entry with resource records
      description: "A new fqdn is added. Note that if you have a zone example.com, and you want to associate it with a ip address, you can use POST to create a new resource record with a/aaaa values in it."
      operationId: "addFdqn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Resource records for the fqdn
        required: true
        schema:
          $ref: "#/definitions/Entry"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: Invalid input
        "403":
          description: Zone not created or not owned by your account
        "409":
          description: fqdn already exist

    put:
      tags:
      - rr
      summary: Replace the resource records for an existing fqdn
      description: ""
      operationId: "putFdqn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the Zone"
        required: true
        schema:
          $ref: "#/definitions/Entry"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: Invalid input
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found
    patch:
      tags:
      - rr
      summary: Create a new fqdn or update/merge an existing fqdn
      description: "Convenience method, like 'upsert' in a database operation. Note that only declared properties will be merged. For example, if you want to switch from cname to a/aaaa records, you specify 'cname' as an empty string and populate a and aaaa arrays with ip numbers. Or, if you don't specify for example 'txt', its value will remain unchanged."
      operationId: "patchFdqn"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Resource records for the fqdn
        required: true
        schema:
          $ref: "#/definitions/Entry"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: Invalid input
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found
    delete:
      tags:
      - rr
      operationId: "deleteFdqn"
      summary: Deletes an existing fqdn
      description: "Deletes a fqdn and all it's resource records (except nn and soa, which are kept in the zone itself). For example, if you delete 'example.com', that means that the resource records are gone, exept the dns information and the soa properties."
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found

  /rr/{fqdn}/{rrname}:
    parameters:
    - in: path
      name: fqdn
      description: "fqdn to delete, for example: 'www.example.com' The Zone and Zone ownership is deduced from the fqdn. You can only use fqdn's for zones already created under your account."
      required: true
      type: string

    - in: path
      name: rrname
      required: true
      type: string
      description: "Narrows the request to a specific resource type. One of: a, aaaa, cname, txt"
    delete:
      tags:
      - rr
      operationId: "deleteFdqnRr"
      summary: Deletes a resource record from an existing fqdn
      description: "Deletes the specified resource record from a fqdn. If no resource records remains, the fqdn is deleted as well."
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: Zone not created or not owned by your account
        "404":
          description: Fdqn not found

  /config/{zone}/master:
    parameters:
    - in: path
      name: zone
      description: fqdn for the zone
      required: true
      type: string

    post:
      tags:
      - config
      summary: "Configure the server as a slave for the zone"
      description: "The zone is added to the list of zones the server serves as a slave (in nsblasts internal database)."
      operationId: "configAddMaster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/MasterZone"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Already exist"

    put:
      tags:
      - config
      summary: "Configure or update the server as a slave for the zone."
      description: "The zone is added to the list of zones the server serves as a slave (in nsblasts internal database). PUT will either create or re-write the config."
      operationId: "configPutMaster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/MasterZone"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Already exist"

    patch:
      tags:
      - config
      summary: "Configure or update the server as a slave for the zone"
      description: "The zone is added to the list of zones the server serves as a slave (in nsblasts internal database). PATCH will either create or merge the config, by leaving existing entities that is not mentioed in the json document as is."
      operationId: "configPatchMaster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Settings for the configuration."
        required: true
        schema:
          $ref: "#/definitions/MasterZone"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
        "409":
          description: "Already exist"

    delete:
      tags:
      - config
      summary: "Remove the server as a slave for the zone"
      description: "This command removes the zone from the list of slave-zones on this server. It will not remove the server from the master-servers SOA record."
      operationId: "configDeleteMaster"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Config not found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /tenant:
     get:
      tags:
        - tenant
      summary: List tenants
      parameters:
        - name: limit
          in: query
          description: Limits the number of items on a page
          schema:
            type: integer
          default: 100
        - name: offset
          in: query
          description: Specifies the page number be returned
          schema:
            type: integer
          default: 1
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsListOfValues"
        "401":
          description: "Unauthorized.)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

  /tenant/{tenantname}:
    parameters:
      - in: path
        name: tenantname
        description: Unique name or UUID for a tenant.
        required: true
        type: string
    get:
      tags:
        - tenant
      summary: Get a tenant
      responses:
        "200":
          description: "Tenant object"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    post:
      tags:
        - tenant
      summary: Create a new tenant.
      operationId: addTenant
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the Tenant.
        required: true
        schema:
          $ref: "#/definitions/Tenant"
      responses:
        "201":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Tenant already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    put:
      tags:
        - tenant
      summary: Update a tenant. Replaces the data.
      operationId: putTenant
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the Tenant.
        required: true
        schema:
          $ref: "#/definitions/Tenant"
      responses:
        "200":
          description: "Success (updated)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "201":
          description: "Success (created)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Tenant already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    patch:
      tags:
        - tenant
      summary: Update a tenant. Merges the data.
      operationId: putTenant
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the Tenant.
        required: true
        schema:
          $ref: "#/definitions/Tenant"
      responses:
        "200":
          description: "Success (updated)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "201":
          description: "Success (created)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "400":
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "409":
          description: "Tenant already exist"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"

    delete:
      tags:
      - tenant
      summary: "Delete a tenant"
      description: "This command deletes a tenant and all it's users, roles and zones."
      operationId: "tenantDelete"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Success (deleted)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ReturnsValue"
        "401":
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"
        "403":
          description: "Forbidden. (Access denied)"
          content:
            application/json:
              schema:
                $ref: "#/definitions/Returns"


  /tenant/{tenantname}/users:
    parameters:
      - name: tenantname
        in: path
        description: Unique name or UUID for a tenant
        required: true
        type: string
      - name: limit
        in: query
        schema:
          type: integer
          default: 100
      - name: offset
        in: query
        schema:
          type: integer
          default: 100
    get:
      tags:
        - user
      summary: List users
      operationId: listUsers
      responses:
        "200":
          description: "Tenant object"
          content:
            application/json:
              schema:
                $ref: "#/definitions/ListUsersResult"
        "403":
          description: "Forbidden. (Access denied)"


  /tenant/{tenantname}/user:
    parameters:
      - in: path
        name: tenantname
        description: Unique name or UUID for a tenant
        required: true
        type: string

    get:
      tags:
        - user
      summary: Get a user
      responses:
        "200":
          description: "User object"
          content:
            application/json:
              schema:
                rcode:
                  type: integer
                error:
                  type: bool
                value:
                  $ref: "#/definitions/User"
        "403":
          description: "Forbidden. (Access denied)"
        "404":
          description: "User not found"

    post:
      tags:
        - user
      summary: Create a new user for a tenant.
      operationId: addUser
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the User.
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                rcode:
                  type: integer
                error:
                  type: bool
                value:
                  $ref: "#/definitions/User"
        "400":
          description: "Invalid input"
        "403":
          description: "Forbidden. (Access denied)"
        "409":
          description: "User already exist"

  /tenant/{tenantname}/user/{userid}:
    parameters:
      - in: path
        name: tenantname
        description: Unique name or UUID for a tenant
        required: true
        type: string
      - in: path
        name: userid
        description: Globally unique ID of the user
        required: true
        type: string
    put:
      tags:
        - user
      summary: Update user. Replaces the user's data.
      operationId: putUser
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the User.
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        "400":
          description: "Invalid input"
        "403":
          description: "Forbidden. (Access denied)"

    patch:
      tags:
        - user
      summary: Update user. Merges old and new data.
      operationId: putUser
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: Properties for the User.
        required: true
        schema:
          $ref: "#/definitions/CreateUser"
      responses:
        "400":
          description: "Invalid input"
        "403":
          description: "Forbidden. (Access denied)"
        "409":
          description: "User already exist"

    delete:
      tags:
      - user
      summary: "Delete a user"
      description: "This command deletes a user."
      operationId: "userDelete"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Ok"
        "400":
          description: "Invalid input"
        "403":
          description: "Forbidden. (Access denied)"
        "404":
          description: "User not found"

definitions:

  Master:
    type: object
    required:
      - hostname
    properties:
      hostname:
        type: string
        description: Hostname or (better) IP to the primary name server to update the zone from.
      port:
        type: integer
        default: 53
      refresh:
        type: integer
        default: 600
      strategy:
        type: string
        default: axfr
        description: "How to update the local zone-data from the master-server. Can be one of: axfr, ixfr "

  Contact:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      notes:
        type: string

  MasterZone:
    type: object
    required:
      - master
    properties:
      uuid:
        type: string
      master:
        $ref: "#/definitions/Master"
      contact:
        $ref: "#/definitions/Contact"
      active:
        type: boolean
        default: true
      notes:
        type: string

  Uuid:
    type: object
    properties:
      id:
        type: string


  Soa:
    type: object
    required:
      - mname
      - rname
    properties:
      refresh:
        type: integer
      retry:
        type: integer
      expire:
        type: integer
      minimum:
        type: integer
      mname:
        type: string
        description: Primar DNS server fqdn
      rname:
        description: Email where a contact for the zone can be reached. The formal format is aquard (see RFC 1035). Nsblast will convert normal email-names like `john.doe@example.com` automatically to the required format.

  Ns:
    type: array
    items:
      type: string

  Zone:
    type: object
    description: A DNS zone. All the properties are optional. Reasonable defaults will be set for omitted items.
    properties:
      soa:
        $ref: "#/definitions/Soa"
      ns:
        $ref: "#/definitions/Ns"
  Rra:
    type: array
    description: Resource type for A (ipv4 and ipv6) entries.
    items:
      type: string

  Mx:
    type: array
    items:
      properties:
        priority:
          type: integer
        host:
          type: string

  Afsdb:
    type: array
    items:
      properties:
        subtype:
          type: integer
        host:
          type: string

  Hinfo:
    type: object
    properties:
      cpu:
        type: string
      os:
        type: string

  Rp:
    type: object
    properties:
      mbox:
        type: string
      txt:
        type: string

  Ptr:
    type: string
    description: Pointer to domain name. Usually only used for IP to domain name mapping in the special zones in-addr.arpa and ip6.

  Srv:
    type: array
    description: See RFC 2782. Note that this Resource Record must be added after the records it points to (it's target) are created and contains A or AAAA Resource Records.
    items:
      type: object
      required:
        - port
        - target
      properties:
        priority:
          type: integer
        weight:
          type: integer
        port:
          type: integer
        target:
          type: string
          description: Pointer (fqdn) to a node that contains address record(s). It can not point to an alias.

  Base64:
    type: string
    description: Binary data. Must be encoded as BASE64.

  Rr:
    type: array
    description: General method to submit *any* Resource Record, using base64 encoding for the RDATA section. This allows you to add experimental Resource Records and any Resource Record not direcly supported by this API. Please note that nsblast only support the CLASS_IN Resource Record type at this time. (This is the class used for the Internet).
    items:
      type: object
      required:
        - type
        - rdata
      properties:
        type:
          type: integer
        rdata:
          $ref: "#/definitions/Base64"


  Entry:
    type: object
    properties:
      ttl:
        type: integer
        default: 2592000
        description: Attribute. Time in seconds that DNS servers can cache the RR(s) before they need to refresh their cache. Applies for all the RR's in the Entry
      a:
        $ref: "#/definitions/Rra"
      txt:
        type: string
      cname:
        type: string
        description: Redirect to another fqdn. If used, a and aaaa must be empty
      mx:
        $ref: "#/definitions/Mx"
      soa:
        $ref: "#/definitions/Soa"
      ns:
        $ref: "#/definitions/Ns"
      hinfo:
        $ref: "#/definitions/Hinfo"
      ptr:
        $ref: "#/definitions/Ptr"
      rp:
        $ref: "#/definitions/Rp"
      afsdb:
        $ref: "#/definitions/Afsdb"
      srv:
        $ref: "#/definitions/Srv"
      dhcid:
        $ref: "#/definitions/Base64"
      openpgpkey:
        $ref: "#/definitions/Base64"
      rr:
        $ref: "#/definitions/Rr"

  Tenant:
    type: object
    properties:
      active:
        type: boolean
        default: true
      properties:
        type: array
        description: Optional properties.
        items:
          properties:
            name:
              type: string
            value:
              type: string

  CreateUser:
    type: object
    properties:
      active:
        type: boolean
        default: true
      name:
        type: string
        description: "Name for the user. Can be a traditional (unix-like) user-name or an email. Must be unique within the scope of a tenant."
        required: true
      password:
        type: string
        description: "Optional password if HTTP BasicAuth is to be used."
      properties:
        type: array
        description: Optional properties.
        items:
          properties:
            name:
              type: string
            value:
              type: string
      roles:
        type: array
        description: "List of (existing) roles to apply to the user"
        items:
          type: string

  User:
    type: object
    properties:
      id:
        type: string
        description: UUID for the user
      active:
        type: boolean
      name:
        type: string
        description: "Name for the user. Can be a traditional (unix-like) user-name or an email. Must be unique within the scope of a tenant."
        required: true
      properties:
        type: array
        description: Optional properties.
        items:
          properties:
            name:
              type: string
            value:
              type: string
      roles:
        type: array
        description: "List of (existing) roles to apply to the user"
        items:
          type: string

  ListTenantsResult:
    type: object
    properties:
      rcode:
        type: integer
      error:
        type: bool
      page:
        type: integer
      value:
        type: array
        items:
          $ref: "#/definitions/Tenant"

  ListUsersResult:
    type: object
    properties:
      rcode:
        type: integer
      error:
        type: bool
      page:
        type: integer
      value:
        type: array
        items:
          $ref: "#/definitions/User"

  Returns:
    type: object
    properties:
      rcode:
        type: integer
        description: HTTP return code
      error:
        type: bool
        description: True if the request failed
      message:
        type: string
        description: "Error-message if the request failed"

  ReturnsValue:
    type: object
    properties:
      rcode:
        type: integer
        description: HTTP return code
      error:
        type: bool
        description: True if the request failed
      message:
        type: string
        description: Error-message if the request failed
      value:
        type: object
        description: Object if the request succeeds

  ReturnsListOfValues:
    type: object
    properties:
      rcode:
        type: integer
        description: HTTP return code
      error:
        type: bool
        description: True if the request failed
      message:
        type: string
        description: Error-message if the request failed
      value:
        type: array
        items:
          type: object
        description: Object if the request succeeds


externalDocs:
  description: "Find out more about nsBLAST and ready to go hosting options"
  url: "https://nsblast.com"
