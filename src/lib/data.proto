// Internal data formats for storage in RocksDB and messages between components.

syntax = "proto3";

package nsblast;

// We assume uuid's are used, but any short, unique string will do
message Uuid {
    string id = 1;
}

// -----------------  DNS data

message Soa {
    uint64 serial = 1;
    uint32 ttl = 2;
    uint32 refresh = 3;
    uint32 retry = 4;
    uint32 expire = 5;
    uint32 minimum = 6;
    string mname = 7; // Primary ns
    string rname = 8; // email (without '@'), zone admin
}

message Mx {
    uint32 ttl = 1;
    uint32 priority = 2;
    string host = 3;
}

message Ns {
    string fqdn = 1;
}

message Rr {
    repeated bytes a = 1; // always 4 bytes for each entry
    repeated bytes aa = 2; // always 16 bytes for each entry
    string cname = 3;
    string txt = 4;
    Mx mx = 5;
}

message Zone {
    Soa soa = 1;
    repeated Ns ns = 2;
    string tns = 3; // Reference to a tenants namespace
}

message Entry {
    Rr rr = 3;
}

// ----------------- Business data
// Minimalistic data, sufficient to manage the system.
// Commercial information is assumed to be stored elsewhere.

message Tenant {
    Uuid id = 1;
    string name = 2; // Globally unique
    map<string, string> properties = 3;
}

message User {
    Uuid id = 1;
    Uuid tenant = 2;
    string name = 3; // Must be unique within the tenant

    enum UserType {
        ADMIN = 0;
        NORMAL = 1;
    }
    UserType userType = 4;

    map<string, string> properties = 5;

    message Permissions {
        bool createNamespace = 1;
        bool updateNamespace = 2;
        bool deleteNamespace = 3;
        bool createApiKey = 4;
        bool deleteApiKey = 5;
        bool createUser = 6;
        bool deleteUser = 7;
        bool changeUserPermissions = 8; // Can only set perms the user itself have
        bool deleteSelf = 9;
        bool addUserToNamespace = 10; // Only to namespaces the user is a member of
        bool removeUserFromNamespace = 11;
    }

    Permissions permissions = 6; // Applies for UserType == NORMAL
}

// A namespace is a unit organizing one or more zones
// The default one is named 'default'
message Namespace {
    Uuid id = 1;
    Uuid tenant = 2;
    string name = 3; // Unique within a tenant scope
    string text = 4; // Allow the admin to keep a note about their namespace
}

// A Role defines a users permission on a namespace
message Role {
    Uuid user = 1;
    Uuid namespace = 2;

    message Permissions {
        bool createZone = 1;
        bool updateZone = 2;
        bool deleteZone = 3;
        bool createEntry = 4;
        bool updateEntry = 5;
        bool deleteEntry = 6;
        bool updateNamespace = 7;
        bool changePermissions = 8; // Can only set perms the user itself have in this ns
        bool deleteNamespace = 9;
    }
    Permissions permissions = 4;
}

